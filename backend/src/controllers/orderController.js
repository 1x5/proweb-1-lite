const Order = require('../models/Order');
const { Op } = require('sequelize');

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
const validateOrder = (order) => {
  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞:', JSON.stringify(order, null, 2));

  if (!order) {
    console.error('‚ùå –û—à–∏–±–∫–∞: order –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    throw new Error('Order data is required');
  }

  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const requiredFields = ['name', 'price'];
  const missingFields = requiredFields.filter(field => {
    const value = order[field];
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è ${field}:`, {
      value,
      type: typeof value,
      isUndefined: value === undefined,
      isNull: value === null,
      isEmpty: value === ''
    });
    return value === undefined || value === null || value === '';
  });
  
  if (missingFields.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', missingFields);
    throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
  const numericFields = ['price', 'cost', 'profit', 'profitPercent', 'balance', 'prepayment'];
  for (const field of numericFields) {
    if (order[field] !== undefined && order[field] !== null && order[field] !== '') {
      const value = parseFloat(order[field]);
      console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–ª—è ${field}:`, {
        original: order[field],
        parsed: value,
        isNaN: isNaN(value)
      });
      if (isNaN(value)) {
        throw new Error(`–ü–æ–ª–µ ${field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: ${order[field]}`);
      }
      order[field] = value; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤
  if (order.expenses !== undefined && !Array.isArray(order.expenses)) {
    console.error('‚ùå –û—à–∏–±–∫–∞: expenses –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', {
      value: order.expenses,
      type: typeof order.expenses
    });
    throw new Error(`–†–∞—Å—Ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: ${typeof order.expenses}`);
  }

  if (order.photos !== undefined && !Array.isArray(order.photos)) {
    console.error('‚ùå –û—à–∏–±–∫–∞: photos –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', {
      value: order.photos,
      type: typeof order.photos
    });
    throw new Error(`–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: ${typeof order.photos}`);
  }

  console.log('‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
  return true;
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
exports.getAllOrders = async (req, res) => {
  try {
    const orders = await Order.findAll();
    res.json(orders);
  } catch (error) {
    console.error('Error fetching orders:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
exports.getOrderById = async (req, res) => {
  try {
    const order = await Order.findByPk(req.params.id);
    if (!order) {
      return res.status(404).json({ error: 'Order not found' });
    }
    res.json(order);
  } catch (error) {
    console.error('Error fetching order:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
exports.createOrder = async (req, res) => {
  try {
    validateOrder(req.body);
    const order = await Order.create(req.body);
    res.status(201).json(order);
  } catch (error) {
    console.error('Error creating order:', error);
    if (error.message.includes('is required') || error.message.includes('must be')) {
      res.status(400).json({ error: error.message });
    } else {
      res.status(500).json({ error: 'Internal server error' });
    }
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
exports.updateOrder = async (req, res) => {
  try {
    validateOrder(req.body);
    const order = await Order.findByPk(req.params.id);
    if (!order) {
      return res.status(404).json({ error: 'Order not found' });
    }
    await order.update(req.body);
    res.json(order);
  } catch (error) {
    console.error('Error updating order:', error);
    if (error.message.includes('is required') || error.message.includes('must be')) {
      res.status(400).json({ error: error.message });
    } else {
      res.status(500).json({ error: 'Internal server error' });
    }
  }
};

// –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
exports.deleteOrder = async (req, res) => {
  try {
    const order = await Order.findByPk(req.params.id);
    if (!order) {
      return res.status(404).json({ error: 'Order not found' });
    }
    await order.destroy();
    res.status(204).send();
  } catch (error) {
    console.error('Error deleting order:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
exports.syncOrders = async (req, res) => {
  try {
    console.log('üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤');
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2));

    const { orders } = req.body;
    if (!orders || !Array.isArray(orders)) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', req.body);
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' });
    }

    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${orders.length}`);

    const results = [];
    for (const orderData of orders) {
      try {
        console.log('üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞:', {
          id: orderData.id,
          name: orderData.name,
          price: orderData.price,
          status: orderData.status
        });

        validateOrder(orderData);

        let order;
        if (orderData.id) {
          console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞');
          order = await Order.findByPk(orderData.id);
          if (!order) {
            console.error('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', orderData.id);
            throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }
          await order.update(orderData);
        } else {
          console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞');
          order = await Order.create(orderData);
        }

        console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', {
          id: order.id,
          name: order.name,
          version: order.version
        });

        results.push(order);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:', {
          error: error.message,
          orderData
        });
        throw error;
      }
    }

    console.log('‚ú® –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    res.json(results);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', {
      message: error.message,
      stack: error.stack
    });
    res.status(500).json({ error: error.message });
  }
}; 