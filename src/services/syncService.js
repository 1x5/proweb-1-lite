import { getOrders, saveOrders } from './OrderService';
import { apiService } from './apiService';

class SyncService {
  constructor() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SyncService...');
    this.isSyncing = false;
    this.lastSyncTime = null;
    this.syncInterval = null;
    this.isOnline = navigator.onLine;
    this.offlineQueue = this.loadOfflineQueue();
    this.retryAttempts = 0;
    this.maxRetryAttempts = 3;
    this.retryDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
    this.statusListeners = new Set();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
    window.addEventListener('online', () => {
      console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      this.handleOnline();
    });
    
    window.addEventListener('offline', () => {
      console.log('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
      this.handleOffline();
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  onSyncStatusChange(callback) {
    this.statusListeners.add(callback);
    return () => {
      this.statusListeners.delete(callback);
    };
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  notifyStatusChange(status) {
    this.statusListeners.forEach(callback => callback(status));
  }

  handleOnline = async () => {
    console.log('üü¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    this.isOnline = true;
    this.startAutoSync();
    
    try {
      if (this.offlineQueue.length === 0) {
        console.log('‚úÖ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      this.notifyStatusChange('syncing');
      
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${this.offlineQueue.length} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏...`);
      
      const failedOrders = [];
      
      while (this.offlineQueue.length > 0) {
        const order = this.offlineQueue[0];
        let retryCount = 0;
        let success = false;
        
        while (retryCount < this.maxRetryAttempts && !success) {
          try {
            console.log(`üì§ –ü–æ–ø—ã—Ç–∫–∞ ${retryCount + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:`, order);
            if (order && order.id) {
              await this.syncWithBackend([order]);
              this.offlineQueue.shift();
              this.saveOfflineQueue();
              console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
              success = true;
            } else {
              console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', order);
              this.offlineQueue.shift();
              this.saveOfflineQueue();
              break;
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, error);
            retryCount++;
            if (retryCount === this.maxRetryAttempts) {
              failedOrders.push(order);
              this.offlineQueue.shift();
              this.saveOfflineQueue();
            } else {
              await new Promise(resolve => setTimeout(resolve, this.retryDelay));
            }
          }
        }
      }
      
      if (failedOrders.length > 0) {
        console.log(`‚ö†Ô∏è ${failedOrders.length} –∑–∞–∫–∞–∑–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å`);
        this.notifyStatusChange('error');
      } else {
        console.log('‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        this.notifyStatusChange('success');
      }
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      this.notifyStatusChange('error');
    }
  };

  handleOffline() {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ...');
    this.isOnline = false;
    this.saveOfflineQueue();
  }

  loadOfflineQueue() {
    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏...');
    const queue = localStorage.getItem('offlineQueue');
    return queue ? JSON.parse(queue) : [];
  }

  saveOfflineQueue() {
    console.log('üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏...');
    localStorage.setItem('offlineQueue', JSON.stringify(this.offlineQueue));
  }

  async processOfflineQueue() {
    if (this.offlineQueue.length === 0) {
      console.log('‚úÖ –û—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞');
      return;
    }

    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${this.offlineQueue.length} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏...`);
    
    while (this.offlineQueue.length > 0) {
      const action = this.offlineQueue[0];
      try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', action);
        await this.syncWithBackend([action]);
        this.offlineQueue.shift();
        this.saveOfflineQueue();
        console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        break;
      }
    }
  }

  async syncWithBackend(orders) {
    if (this.isSyncing) {
      console.log('‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
      return;
    }

    this.isSyncing = true;
    console.log('üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      for (const order of orders) {
        if (!order || !order.id) {
          console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', order);
          continue;
        }

        try {
          await apiService.getOrderById(order.id);
          console.log(`‚úÖ –ó–∞–∫–∞–∑ ${order.id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
        } catch (error) {
          if (error.status === 404) {
            console.log(`‚ûï –ó–∞–∫–∞–∑ ${order.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π`);
            await apiService.createOrder(order);
          } else {
            throw error;
          }
        }
      }

      // –¢–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
      const result = await apiService.syncOrders(orders);
      this.lastSyncTime = new Date();
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    } finally {
      this.isSyncing = false;
    }
  }

  async compressPhoto(photo) {
    if (!photo.url) return photo;
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è —Å–∂–∞—Ç–∏—è
    const img = new Image();
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    return new Promise((resolve) => {
      img.onload = () => {
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        const maxWidth = 800;
        const maxHeight = 800;
        
        let width = img.width;
        let height = img.height;
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        if (width > height) {
          if (width > maxWidth) {
            height *= maxWidth / width;
            width = maxWidth;
          }
        } else {
          if (height > maxHeight) {
            width *= maxHeight / height;
            height = maxHeight;
          }
        }
        
        canvas.width = width;
        canvas.height = height;
        ctx.drawImage(img, 0, 0, width, height);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 0.7
        const compressedUrl = canvas.toDataURL('image/jpeg', 0.7);
        
        resolve({
          ...photo,
          url: compressedUrl
        });
      };
      img.src = photo.url;
    });
  }

  async syncOnSave(order) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      if (!navigator.onLine) {
        console.log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å');
        this.addToOfflineQueue(order);
        return { success: true, message: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' };
      }

      // –°–∂–∏–º–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const compressedPhotos = await Promise.all(
        (order.photos || []).map(photo => this.compressPhoto(photo))
      );
      
      const orderToSync = {
        ...order,
        photos: compressedPhotos
      };

      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ (—Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID)
      if (order.id.startsWith('temp-')) {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const { id, ...orderWithoutId } = orderToSync;
        const result = await apiService.createOrder(orderWithoutId);
        return { success: true, data: result };
      }

      // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
      const result = await apiService.updateOrder(orderToSync.id, orderToSync);
      return { success: true, data: result };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      this.addToOfflineQueue(order);
      return { 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å'
      };
    }
  }

  async syncOnDelete(orderId) {
    console.log('üü• =====================================');
    console.log('üü• –ù–ê–ß–ê–õ–û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò');
    console.log('üü• –ó–∞–∫–∞–∑ ID:', orderId);
    console.log('üü• =====================================');

    try {
      // –ï—Å–ª–∏ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å temp-, –∑–Ω–∞—á–∏—Ç –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –±—ã–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (orderId.startsWith('temp-')) {
        console.log('‚úÖ –ó–∞–∫–∞–∑ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
        return true;
      }

      console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
      await apiService.deleteOrder(orderId);
      console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      return true;
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò –ó–ê–ö–ê–ó–ê:', error);
      return false;
    } finally {
      console.log('üü• =====================================');
      console.log('üü• –ö–û–ù–ï–¶ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò');
      console.log('üü• =====================================');
    }
  }

  startAutoSync(interval = 300000) {
    console.log(`‚è∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${interval}–º—Å)`);
    this.syncInterval = setInterval(() => {
      if (this.offlineQueue.length > 0) {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
        this.processOfflineQueue();
      }
    }, interval);
  }

  stopAutoSync() {
    console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
  }
}

export default new SyncService(); 