import { getOrders, saveOrders } from './OrderService';
import { apiService } from './apiService';

class SyncService {
  constructor() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SyncService...');
    this.isSyncing = false;
    this.lastSyncTime = null;
    this.syncInterval = null;
    this.isOnline = navigator.onLine;
    this.offlineQueue = this.loadOfflineQueue();
    this.retryAttempts = 0;
    this.maxRetryAttempts = 3;
    this.retryDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
    window.addEventListener('online', () => {
      console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      this.handleOnline();
    });
    
    window.addEventListener('offline', () => {
      console.log('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
      this.handleOffline();
    });
  }

  handleOnline = async () => {
    console.log('üü¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    this.isOnline = true;
    this.startAutoSync();
    
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if (this.onSyncStatusChange) {
        this.onSyncStatusChange('syncing');
      }
      
      const result = await this.processOfflineQueue();
      
      if (this.onSyncStatusChange) {
        this.onSyncStatusChange(result ? 'success' : 'error');
      }
      
      // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        if (this.onSyncStatusChange) {
          this.onSyncStatusChange(null);
        }
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      if (this.onSyncStatusChange) {
        this.onSyncStatusChange('error');
      }
    }
  };

  handleOffline() {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ...');
    this.isOnline = false;
    this.saveOfflineQueue();
  }

  loadOfflineQueue() {
    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏...');
    const queue = localStorage.getItem('offlineQueue');
    return queue ? JSON.parse(queue) : [];
  }

  saveOfflineQueue() {
    console.log('üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏...');
    localStorage.setItem('offlineQueue', JSON.stringify(this.offlineQueue));
  }

  async processOfflineQueue() {
    if (this.offlineQueue.length === 0) {
      console.log('‚úÖ –û—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞');
      return;
    }

    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${this.offlineQueue.length} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏...`);
    
    while (this.offlineQueue.length > 0) {
      const action = this.offlineQueue[0];
      try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', action);
        await this.syncWithBackend([action]);
        this.offlineQueue.shift();
        this.saveOfflineQueue();
        console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        break;
      }
    }
  }

  async syncWithBackend(orders) {
    if (this.isSyncing) {
      console.log('‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
      return;
    }

    this.isSyncing = true;
    console.log('üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');

    try {
      const result = await apiService.syncOrders(orders);
      this.lastSyncTime = new Date();
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    } finally {
      this.isSyncing = false;
    }
  }

  async syncOnSave(order) {
    console.log('üü¶ =====================================');
    console.log('üü¶ –ù–ê–ß–ê–õ–û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–ò –°–û–•–†–ê–ù–ï–ù–ò–ò');
    console.log('üü¶ –ó–∞–∫–∞–∑:', order.id, order.name);
    console.log('üü¶ =====================================');
    
    if (!navigator.onLine) {
      console.log('üì± –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å');
      this.offlineQueue.push(order);
      this.saveOfflineQueue();
      console.log('üíæ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å');
      return false;
    }

    try {
      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      const result = await this.syncWithBackend([order]);
      console.log('‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:', error);
      console.log('üì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å...');
      this.offlineQueue.push(order);
      this.saveOfflineQueue();
      console.log('üíæ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å');
      return false;
    } finally {
      console.log('üü¶ =====================================');
      console.log('üü¶ –ö–û–ù–ï–¶ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–ò –°–û–•–†–ê–ù–ï–ù–ò–ò');
      console.log('üü¶ =====================================');
    }
  }

  startAutoSync(interval = 300000) {
    console.log(`‚è∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${interval}–º—Å)`);
    this.syncInterval = setInterval(() => {
      if (this.offlineQueue.length > 0) {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
        this.processOfflineQueue();
      }
    }, interval);
  }

  stopAutoSync() {
    console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
  }
}

export default new SyncService(); 